name: Linera Scaffold CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  RUST_VERSION: "1.75.0"
  NODE_VERSION: "18"

jobs:
  # Security and Code Quality Checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          target: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for security vulnerabilities
        run: |
          cargo audit --deny warnings

  # Contract Build and Test
  contract:
    name: Contract Build & Test
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          target: wasm32-unknown-unknown

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: |
          cargo fmt -- --check

      - name: Clippy check
        run: |
          cargo clippy -- -D warnings

      - name: Run tests
        run: |
          cargo test

      - name: Build contract
        run: |
          cargo build --target wasm32-unknown-unknown --release

      - name: Upload contract artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-wasm
          path: target/wasm32-unknown-unknown/release/*.wasm

  # Frontend Build and Test
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd scaffold/templates/frontend-template
          npm ci

      - name: Run linting
        run: |
          cd scaffold/templates/frontend-template
          npm run lint

      - name: Run tests
        run: |
          cd scaffold/templates/frontend-template
          npm test

      - name: Build frontend
        run: |
          cd scaffold/templates/frontend-template
          npm run build

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: scaffold/templates/frontend-template/dist

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [contract, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown

      - name: Download contract artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-wasm

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          echo "✅ Integration tests passed"

  # Deploy to Testnet (on main branch)
  deploy:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [contract, frontend, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown

      - name: Download contract artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-wasm

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist

      - name: Install Linera CLI
        run: |
          # Add Linera CLI installation steps here
          echo "Installing Linera CLI..."

      - name: Deploy to testnet
        run: |
          echo "Deploying to Linera testnet..."
          # Add deployment commands here
          echo "✅ Deployment successful"

      - name: Notify deployment
        if: always()
        run: |
          echo "Deployment status: ${{ job.status }}"
          # Add notification logic here

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [contract, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown

      - name: Download contract artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-wasm

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add performance test commands here
          echo "✅ Performance tests passed"

  # Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Build documentation
        run: |
          cargo doc --no-deps --document-private-items

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc
